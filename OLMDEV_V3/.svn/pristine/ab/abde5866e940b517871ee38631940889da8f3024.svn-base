package xbolt.itm.term.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import xbolt.cmm.controller.XboltController;
import xbolt.cmm.framework.handler.MessageHandler;
import xbolt.cmm.framework.util.EmailUtil;
import xbolt.cmm.framework.util.ExceptionUtil;
import xbolt.cmm.framework.util.StringUtil;
import xbolt.cmm.framework.val.GlobalVal;
import xbolt.cmm.service.CommonService;


@Controller
@SuppressWarnings("unchecked") 
public class StandardTermsActionController extends XboltController {

	@Autowired
    @Qualifier("commonService")
    private CommonService commonService;
	
	@Resource(name = "standardTermsService")
	private CommonService standardTermsService;
	
	@RequestMapping(value="/termsMgt.do")
	public String termsMgt(HttpServletRequest request, HashMap cmmMap, ModelMap model) throws Exception{
		try {			
				String arcCode =  StringUtil.checkNull(cmmMap.get("arcCode"),"");
				String menuStyle =  StringUtil.checkNull(cmmMap.get("menuStyle"),"");
				Map setMap = new HashMap();
				setMap.put("languageID", cmmMap.get("sessionCurrLangType"));				
				setMap.put("s_itemID", "AT00034");
				List LOVAT34List = commonService.selectList("attr_SQL.selectAttrLovOption", setMap);
				
				Map dataMap = new HashMap();
				dataMap.put("CODE", "");
				dataMap.put("NAME", "ALL");
				
				LOVAT34List.add(0, dataMap);
				model.put("LOVAT34List", LOVAT34List);
				model.put("arcCode", arcCode);
				model.put("menuStyle", menuStyle);
				model.put("menu", getLabel(request, commonService));	/*Label Setting*/	
				model.addAttribute(HTML_HEADER, "Standard Terms");
				model.put("csr", cmmMap.get("csr"));
				model.put("mgt", cmmMap.get("mgt"));
				model.put("linkOption", cmmMap.get("linkOption"));
				
				String pmenuIndex = ""; 
				int index = 1;
				for(int i=0; i<LOVAT34List.size(); i++){				
					if(i==0){
						pmenuIndex = ""+index;
					}else{
						pmenuIndex = pmenuIndex +" "+ index;
					}
					index++;
				}
				model.put("pmenuIndex",pmenuIndex);
		}
		catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}
		
		return nextUrl("/itm/term/termsMgt");
	}	

	@RequestMapping(value="/standardTermsMgt.do")
	public String standardTermsMgt(HttpServletRequest request, HashMap commandMap, ModelMap model) throws Exception{
		try {
				model.addAttribute(HTML_HEADER, "Standard Terms");
				String attrTypeCode = StringUtil.checkNull(commandMap.get("attrTypeCode")); 
				model.put("attrTypeCode", attrTypeCode);
		}
		catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}
		
		return nextUrl("/itm/term/standardTermsMgt");
	}	
	
	@RequestMapping(value="/standardTermsSch.do")
	public String standardTermsSch(HttpServletRequest request, HashMap commandMap, ModelMap model) throws Exception{
		model.addAttribute(HTML_HEADER, "Standard Terms");
		
		try { 
				String lovCode = StringUtil.checkNull(commandMap.get("lovCode"));
				String page = StringUtil.checkNull(request.getParameter("page"), "1");
				String searchCondition1 = StringUtil.checkNull(request.getParameter("searchCondition1"), ""); // 검색 조건
				String searchCondition2 = StringUtil.checkNull(request.getParameter("searchCondition2"), ""); // 검색 조건
				String searchCondition3 = StringUtil.checkNull(request.getParameter("searchCondition3"), ""); // 검색 조건
				String searchCondition4 = StringUtil.checkNull(request.getParameter("searchCondition4"), ""); // 검색 조건
				String languageID =StringUtil.checkNull(commandMap.get("sessionCurrLangType"));
				String userId = StringUtil.checkNull(commandMap.get("sessionUserId"));
				String searchValue = StringUtil.checkNull(commandMap.get("searchValue"));
			
				/** BEGIN ::: LANGUAGE**/
				HashMap cmmMap = new HashMap();
				HashMap getMap = new HashMap();
				
				cmmMap.put("languageID", languageID);
				cmmMap.put("userId", userId);
				String clientId = StringUtil.checkNull(commonService.selectString("standardTerms_SQL.getUserClientId", cmmMap));
				
				model.put("menu", getLabel(request, commonService));	/*Label Setting*/
				/** END ::: LANGUAGE**/
				
				Map mapValue = new HashMap();
				mapValue.put("languageID", languageID);
				
				if (!searchCondition1.isEmpty()) {
					mapValue.put("searchCondition1", searchCondition1);
				} else if (!searchCondition2.isEmpty()) {
					mapValue.put("searchCondition2", searchCondition2);
				} else if (!searchCondition3.isEmpty()) {
					mapValue.put("searchCondition3", searchCondition3);
					mapValue.put("searchCondition4", searchCondition4);
				}
				
				String lovName = "";
				lovName = StringUtil.checkNull(commonService.selectString("standardTerms_SQL.getLovValue", commandMap),"");
								
				model.put("languageID", languageID);
				model.put("clientID", clientId);
				model.put("page", page);
				model.put("searchCondition1", searchCondition1);
				model.put("searchCondition2", searchCondition2);
				model.put("searchCondition3", searchCondition3);
				model.put("searchCondition4", searchCondition4);
				model.put("pageScale", GlobalVal.LIST_PAGE_SCALE);
				model.put("lovCode", lovCode);
				model.put("lovName", lovName);
				model.put("csr", commandMap.get("csr"));		
				model.put("mgt", commandMap.get("mgt"));
				model.put("searchValue", searchValue);
				model.put("linkOption", commandMap.get("linkOption"));
		}
		catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}

		return nextUrl("/itm/term/standardTerms");
	}
	
	@RequestMapping(value="/standardTermsEditForm.do")
	public String standardTermsAdd(HttpServletRequest request, ModelMap model) throws Exception{
		try {
			
			HashMap cmmMap = new HashMap();
			HashMap getMap = new HashMap();
			String languageID = request.getParameter("languageID");
			String clientID = request.getParameter("clientID");
			String isNew = request.getParameter("isNew");
			String typeCode = request.getParameter("typeCode");
			String subject = "";
			String content = "";
			
			if (isNew.equals("N")) {
				getMap = new HashMap();
				cmmMap.put("TypeCode", typeCode);
				cmmMap.put("LanguageID", languageID);
				List termList = commonService.selectList("standardTerms_SQL.getStandardTerm", cmmMap);
				getMap = (HashMap) termList.get(0);
				subject = getMap.get("subject").toString();
				content = getMap.get("content").toString();
			}
			
			model.put("menu", getLabel(request, commonService));	/*Label Setting*/
			model.put("languageID", languageID);
			model.put("clientID", clientID);
			model.put("isNew", isNew);
			model.put("typeCode", typeCode);
			model.put("subject", subject);
			model.put("content", content);
			
		} catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}

		return nextUrl("/itm/term/standardTermsEdit");
	}
	
	@RequestMapping(value = "/standardTermsEdit.do")
	public String standardTermsEdit(HttpServletRequest request, HashMap commandMap, ModelMap model) throws Exception {
		try {
			Map setMap = new HashMap();
			String languageID = StringUtil.checkNull(request.getParameter("languageID"), "");
			String clientID = StringUtil.checkNull(request.getParameter("clientID"), "");
			String subject = StringUtil.checkNull(request.getParameter("subject"), "");
			String content = StringUtil.checkNull(request.getParameter("content"), "");
			String isNew = StringUtil.checkNull(request.getParameter("isNew"), "");
			String typeCode = StringUtil.checkNull(request.getParameter("typeCode"), "");
			
			if (isNew.equals("N")) {
				/* update */
				Map updateValMap = new HashMap();
				Map updateInfoMap = new HashMap();
				List updateList = new ArrayList();
				
				updateValMap.put("subject", subject);
				updateValMap.put("content", content);
				updateValMap.put("TypeCode", typeCode);
				updateValMap.put("LanguageID", languageID);
				
				updateList.add(updateValMap);
				updateInfoMap.put("KBN", "update");
				updateInfoMap.put("SQLNAME", "standardTerms_SQL.standardTermsUpdate");
				
				standardTermsService.save(updateList, updateInfoMap);
				
			} else {
				
				/* insert */
				// Max TypdeCode를 취득
				String maxTypeCode = commonService.selectString("standardTerms_SQL.getMaxTypeCode", setMap);
				maxTypeCode = String.valueOf(Integer.parseInt(maxTypeCode.substring(2)) + 1);
				int cnt = maxTypeCode.length();
				for (int i = 0 ; i < (5 - cnt); i++) {
					maxTypeCode = "0" + maxTypeCode;
				}
				maxTypeCode = "ST" + maxTypeCode;
				
				Map insertValMap = new HashMap();
				Map insertInfoMap = new HashMap();
				List insertList = new ArrayList();
				
				insertValMap.put("TypeCode", maxTypeCode);
				insertValMap.put("LanguageID", languageID);
				insertValMap.put("subject", subject);
				insertValMap.put("content", content);
				insertValMap.put("ClientID", clientID);
				
				insertList.add(insertValMap);
				insertInfoMap.put("KBN", "insert");
				insertInfoMap.put("SQLNAME", "standardTerms_SQL.standardTermsInsert");
				
				standardTermsService.save(insertList, insertInfoMap);
				
			}
			
			// 화면 표시 메뉴 Map 취득
			model.put("menu", getLabel(request, commonService));	/*Label Setting*/
						
			Map target = new HashMap();
			//target.put(AJAX_ALERT, "저장이 성공하였습니다.");
			target.put(AJAX_ALERT, MessageHandler.getMessage(commandMap.get("sessionCurrLangCode") + ".WM00067")); // 저장 성공
			target.put(AJAX_SCRIPT, "parent.doReturn();");
			model.addAttribute(AJAX_RESULTMAP, target);
			
		} catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}
		
		return nextUrl(AJAXPAGE);
	}
	
	@RequestMapping(value = "/standardTermsDelete.do")
	public String standardTermsDelete(HttpServletRequest request, HashMap commandMap, ModelMap model) throws Exception {
		try {
			String languageID = StringUtil.checkNull(request.getParameter("languageID"), "");
			String typeCode = StringUtil.checkNull(request.getParameter("typeCode"), "");
			
			Map deleteValMap = new HashMap();
			Map deleteInfoMap = new HashMap();
			List deleteList = new ArrayList();
			deleteValMap.put("TypeCode", typeCode);
			deleteValMap.put("LanguageID", languageID);
			deleteList.add(deleteValMap);
			deleteInfoMap.put("KBN", "delete");
			deleteInfoMap.put("SQLNAME", "standardTerms_SQL.standardTermsDelete");
			standardTermsService.save(deleteList, deleteInfoMap);
			
			model.put("menu", getLabel(request, commonService));	/*Label Setting*/
						
			Map target = new HashMap();
			//target.put(AJAX_ALERT, "저장이 성공하였습니다.");
			target.put(AJAX_ALERT, MessageHandler.getMessage(commandMap.get("sessionCurrLangCode") + ".WM00067")); // 저장 성공
			target.put(AJAX_SCRIPT, "parent.doReturn();");
			model.addAttribute(AJAX_RESULTMAP, target);
			
		} catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}
		
		return nextUrl(AJAXPAGE);
	}
	
	@RequestMapping(value="/viewTermDetail.do")
	public String viewTermDetail(HttpServletRequest request, HashMap commandMap, ModelMap model) throws Exception{
		String url = "/itm/term/viewTermDetail";
		try {
				HashMap setMap = new HashMap();
				String itemID = StringUtil.checkNull(request.getParameter("itemID"));
				setMap.put("itemID", itemID);
				setMap.put("s_itemID", itemID);
				setMap.put("languageID", commandMap.get("sessionCurrLangType"));
			
				Map termDetailInfo = commonService.select("standardTerms_SQL.getTermDetailInfo", setMap);
				List itemHistoryList = commonService.selectList("cs_SQL.getItemChangeList_gridList", setMap);
				
				String csrID = StringUtil.checkNull(commandMap.get("csr"));
				Map setData = new HashMap();
				setData.put("ProjectID", csrID);
				String csrAuthorID = StringUtil.checkNull(commonService.selectString("project_SQL.getPjtAuthorID", setData));
				
				model.put("itemID", itemID);
				model.put("termDetailInfo", termDetailInfo);
				model.put("itemHistoryList", itemHistoryList);
				model.put("csr", commandMap.get("csr"));
				model.put("mgt", commandMap.get("mgt"));
				model.put("csrAuthorID", csrAuthorID);
				model.put("menu", getLabel(request, commonService)); /* Label Setting */	
							
		} catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}
		return nextUrl(url);
	}
	
	@RequestMapping(value="/editTermDetail.do")
	public String editTermDetail(HttpServletRequest request, HashMap commandMap, ModelMap model) throws Exception{
		String url = "/itm/term/editTermDetail";
		try {
				HashMap setMap = new HashMap();
				String itemID = StringUtil.checkNull(request.getParameter("itemID"));
				String languageID = StringUtil.checkNull(request.getParameter("languageID"));
				setMap.put("languageID", languageID);
				setMap.put("itemID", itemID);
			
				Map termDetailInfo = commonService.select("standardTerms_SQL.getTermDetailInfo", setMap);
				
				model.put("itemID", itemID);
				model.put("termDetailInfo", termDetailInfo);
				model.put("csr", commandMap.get("csr"));
				model.put("languageID", languageID);
				model.put("menu", getLabel(request, commonService)); /* Label Setting */	
							
		} catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}
		return nextUrl(url);
	}
	
	@RequestMapping(value = "/saveTermDetail.do")
	public String saveTermDetail(HttpServletRequest request, HashMap commandMap, ModelMap model) throws Exception {
		Map target = new HashMap();
		try {
				Map setMap = new HashMap();
				String languageID = StringUtil.checkNull(commandMap.get("sessionCurrLangType"), "");
				String AT00034 = StringUtil.checkNull(request.getParameter("Category"), "");
				String AT00073 = StringUtil.checkNull(request.getParameter("Abbreviation"), "");
				String AT00001 = StringUtil.checkNull(request.getParameter("Name"), "");
				String AT00057 = StringUtil.checkNull(request.getParameter("EnglishNM"), "");
				String AT00003 = StringUtil.checkNull(request.getParameter("Overview"), "");
				String AT00056 = StringUtil.checkNull(request.getParameter("Content"), "");
				String itemID = StringUtil.checkNull(request.getParameter("itemID"));
				String csr = StringUtil.checkNull(request.getParameter("csr"));
				String mgt = StringUtil.checkNull(request.getParameter("mgt"),"N");				
				
				String changeSetDescription = StringUtil.checkNull(request.getParameter("changeSetDescription"));
				if (!mgt.equals("Y")) {
				
					setMap.put("itemID", itemID);
					setMap.put("languageID", languageID);
					
					setMap.put("attrTypeCode", "AT00034");
					setMap.put("lovCode", AT00034);
					setMap.put("plainText", AT00034);
					commonService.update("standardTerms_SQL.saveTerms",setMap);
					
					setMap.put("attrTypeCode", "AT00073");
					setMap.put("plainText", AT00073);
					commonService.update("standardTerms_SQL.saveTerms",setMap);
					
					setMap.put("attrTypeCode", "AT00001");
					setMap.put("plainText", AT00001);
					commonService.update("standardTerms_SQL.saveTerms",setMap);
					
					setMap.put("attrTypeCode", "AT00057");
					setMap.put("plainText", AT00057);
					commonService.update("standardTerms_SQL.saveTerms",setMap);
					
					setMap.put("attrTypeCode", "AT00003");
					setMap.put("plainText", AT00003);
					commonService.update("standardTerms_SQL.saveTerms",setMap);
					
					setMap.put("attrTypeCode", "AT00056");
					setMap.put("plainText", AT00056);
					commonService.update("standardTerms_SQL.saveTerms",setMap);
					
					setMap.put("ChangeSetID", commonService.selectString("cs_SQL.selectChangeSetMaxID", setMap));
					setMap.put("Description",changeSetDescription);
					setMap.put("ProjectID",csr);
					setMap.put("PJTcategory","PC1");
					setMap.put("ItemID",itemID);
					setMap.put("AuthorID", commandMap.get("sessionUserId"));
					setMap.put("Authorname", commandMap.get("sessionUserNm"));
					setMap.put("TeamID", commandMap.get("sessionTeamId"));
					setMap.put("CompanyID", commandMap.get("sessionCompanyId"));
					setMap.put("ChangeType", "MOD");
					setMap.put("Status", "CLS");
					
					commonService.insert("cs_SQL.addChangeSet", setMap);	
					
				}else if (mgt.equals("Y"))  {
					setMap.put("s_itemIDs", itemID);
					setMap.put("ChangeType", "MOD");
				    setMap.put("Status", "REL");
					
					commonService.update("project_SQL.updateItemStatus", setMap);
					//commonService.update("cs_SQL.updateChangeSet", setMap);
					
					 // send Eamil 
					setMap = new HashMap();
					HashMap mailFormMap = new HashMap();
					List receiverList = new ArrayList();
					Map receiverMap = new HashMap();	

					setMap.put("itemID",itemID);
					setMap.put("languageID",languageID);
					mailFormMap = (HashMap) commonService.select("item_SQL.getItemAuthority", setMap); // 메일 수신자 정보 조회
					Map termInfoMap = (HashMap) commonService.select("standardTerms_SQL.getTermDetailInfo", setMap); 
					receiverMap.put("receiptUserID", mailFormMap.get("AuthorID"));
					receiverList.add(0,receiverMap);
					mailFormMap.put("receiverList", receiverList);
					
					Map temp = new HashMap();
					temp.put("Category", "EMAILCODE"); 
					temp.put("TypeCode", "TERMREL");
					temp.put("LanguageID", commandMap.get("sessionCurrLangType"));
					Map emDescription = commonService.select("common_SQL.label_commonSelect", temp);
					
					mailFormMap.put("emDescription", emDescription.get("Description"));
					Map setMailCSRMapRst = (Map)setEmailLog(request, commonService, mailFormMap, "TERMREL");
					
					if(StringUtil.checkNull(setMailCSRMapRst.get("type")).equals("SUCESS")){
						HashMap mailMap = (HashMap)setMailCSRMapRst.get("mailLog");	

						String mailSubject = StringUtil.checkNull(mailMap.get("mailSubject"));
						
						mailMap.put("mailSubject", mailSubject + " " + termInfoMap.get("Name"));
						
						Map resultMailMap = EmailUtil.sendMail(mailMap, mailFormMap, getLabel(request, commonService));
						System.out.println("SEND EMAIL TYPE:"+resultMailMap+ "Msg :" + StringUtil.checkNull(setMailCSRMapRst.get("type")));
					}else{
						System.out.println("SAVE EMAIL_LOG FAILE/DONT Msg : "+ StringUtil.checkNull(setMailCSRMapRst.get("msg")));
					}
					
			}	
				
				target.put(AJAX_ALERT, MessageHandler.getMessage(commandMap.get("sessionCurrLangCode") + ".WM00067"));
				target.put(AJAX_SCRIPT, "parent.fnCallBack();");
			
		} catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}
		model.addAttribute(AJAX_RESULTMAP, target);
		return nextUrl(AJAXPAGE);
	}
	
	@RequestMapping(value = "/registerTerm.do")
	public String registTerms(HttpServletRequest request, HashMap commandMap, ModelMap model) throws Exception {
		Map target = new HashMap();
		try {
				Map setMap = new HashMap();				
				String languageID = StringUtil.checkNull(commandMap.get("sessionCurrLangType"), "");
				String AT00034 = StringUtil.checkNull(request.getParameter("Category"), "");
				String AT00073 = StringUtil.checkNull(request.getParameter("Abbreviation"), "");
				String AT00001 = StringUtil.checkNull(request.getParameter("Name"), "");
				String AT00057 = StringUtil.checkNull(request.getParameter("EnglishNM"), "");
				String AT00003 = StringUtil.checkNull(request.getParameter("Overview"), "");
				String AT00056 = StringUtil.checkNull(request.getParameter("Content"), "");
				
				String csr = StringUtil.checkNull(request.getParameter("csr"));
				String userID = StringUtil.checkNull(commandMap.get("sessionUserId"));
				// insert Item
				String itemID = commonService.selectString("item_SQL.getItemMaxID", setMap);
							
				setMap.put("Version", "1");
				setMap.put("Deleted", "0");
				setMap.put("Creator", userID);
				setMap.put("CategoryCode", "OJ");
				setMap.put("ItemTypeCode", "OJ00011");
				setMap.put("ClassCode", "CL11004");
				setMap.put("OwnerTeamId", commandMap.get("sessionTeamId"));
				setMap.put("Identifier", request.getParameter("newIdentifier"));
				setMap.put("ItemID", itemID);			
				setMap.put("s_itemID", request.getParameter("s_itemID"));			
				
				setMap.put("ProjectID",csr);
				setMap.put("AuthorID", userID);
				setMap.put("Status","NEW2");
				commonService.insert("item_SQL.insertItem", setMap);
				
				
				setMap = new HashMap();
				setMap.put("itemID", itemID);
				setMap.put("languageID", languageID);
				
				setMap.put("attrTypeCode", "AT00034");
				setMap.put("plainText", AT00034);
				setMap.put("lovCode", AT00034);
				commonService.update("standardTerms_SQL.saveTerms",setMap);
				setMap.remove("lovCode");
				
				setMap.put("attrTypeCode", "AT00073");
				setMap.put("plainText", AT00073);
				commonService.update("standardTerms_SQL.saveTerms",setMap);
				
				setMap.put("attrTypeCode", "AT00001");
				setMap.put("plainText", AT00001);
				commonService.update("standardTerms_SQL.saveTerms",setMap);
				
				setMap.put("attrTypeCode", "AT00057");
				setMap.put("plainText", AT00057);
				commonService.update("standardTerms_SQL.saveTerms",setMap);
				
				setMap.put("attrTypeCode", "AT00003");
				setMap.put("plainText", AT00003);
				commonService.update("standardTerms_SQL.saveTerms",setMap);
				
				setMap.put("attrTypeCode", "AT00056");
				setMap.put("plainText", AT00056);
				commonService.update("standardTerms_SQL.saveTerms",setMap);
				
				setMap = new HashMap();
				setMap.put("languageID", languageID);
				
				setMap.put("ChangeType", "NEW");
				setMap.put("ProjectID",csr);
				setMap.put("PJTcategory","PC1");
				setMap.put("Status", "CLS");
				setMap.put("ItemID",itemID);
				setMap.put("ChangeSetID", commonService.selectString("cs_SQL.selectChangeSetMaxID", setMap));
				setMap.put("AuthorID", commandMap.get("sessionUserId"));
				setMap.put("Authorname", commandMap.get("sessionUserNm"));
				setMap.put("TeamID", commandMap.get("sessionTeamId"));
				setMap.put("CompanyID", commandMap.get("sessionCompanyId"));
					
				commonService.insert("cs_SQL.addChangeSet", setMap);

				List receiverList = new ArrayList();
				setMap = new HashMap();
				setMap.put("ProjectID",csr);
				
				String authorID = commonService.selectString("project_SQL.getPjtAuthorID",setMap);
				
				Map tempMap = new HashMap();
				tempMap.put("receiptUserID",authorID);
				receiverList.add(0,tempMap);
				
				HashMap setMailData = new HashMap();
				
				setMailData.put("receiverList",receiverList);
				
				Map setMailMap = (Map)setEmailLog(request, commonService, setMailData, "TERMREG"); 
				if(StringUtil.checkNull(setMailMap.get("type")).equals("SUCESS")){
					HashMap mailMap = (HashMap)setMailMap.get("mailLog");
					setMailData.put("content", AT00003);
					String mailSubject = StringUtil.checkNull(mailMap.get("mailSubject"));
					
					mailMap.put("mailSubject", mailSubject + " " + AT00001);
					
					Map resultMailMap = EmailUtil.sendMail(mailMap,setMailData,getLabel(request, commonService));
					System.out.println("SEND EMAIL TYPE:"+resultMailMap+", Msg:"+StringUtil.checkNull(setMailMap.get("type")));
				}else{
					System.out.println("SAVE EMAIL_LOG FAILE/DONT Msg : "+StringUtil.checkNull(setMailMap.get("msg")));
				}
				
				model.put("itemID", itemID);
				target.put(AJAX_ALERT, MessageHandler.getMessage(commandMap.get("sessionCurrLangCode") + ".WM00067"));
				target.put(AJAX_SCRIPT, "parent.fnCallBackAdd('"+itemID+"');");
			
		} catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}
		model.addAttribute(AJAX_RESULTMAP, target);
		return nextUrl(AJAXPAGE);
	}
	
	@RequestMapping(value = "/deleteTerm.do")
	public String deleteTerm(HttpServletRequest request, HashMap commandMap, ModelMap model) throws Exception {
		Map target = new HashMap();
		try {
				Map setMap = new HashMap();	
				String itemID = StringUtil.checkNull(request.getParameter("itemID"));
				setMap.put("FromItemID", itemID); 
				setMap.put("ToItemID", itemID);
				
				commonService.update("item_SQL.processDeleteCheck",setMap);
				target.put(AJAX_ALERT, MessageHandler.getMessage(commandMap.get("sessionCurrLangCode") + ".WM00069"));
				target.put(AJAX_SCRIPT, "fnCallBack();");
			
		} catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}
		model.addAttribute(AJAX_RESULTMAP, target);
		return nextUrl(AJAXPAGE);
	}
	
	@RequestMapping(value="/termsURL.do")
	public String termsURL(ModelMap model, HashMap cmmMap) throws Exception {		
		Map target = new HashMap();	
		try {		
				String url = StringUtil.checkNull(cmmMap.get("url"))+".do";
				
				target.put(AJAX_SCRIPT, "parent.creatMenuTab('"+cmmMap.get("menuID")+"', '"+url+"', '1');");					
		}
		catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}		
		model.addAttribute(AJAX_RESULTMAP,target);
		return nextUrl(AJAXPAGE);
	}
	
	@RequestMapping(value="/popupTermsMgt.do")
	public String popupTermsMgt(HttpServletRequest request, HashMap cmmMap, ModelMap model) throws Exception{
		try {			
				String arcCode =  StringUtil.checkNull(cmmMap.get("arcCode"),"");
				String menuStyle =  StringUtil.checkNull(cmmMap.get("menuStyle"),"");
				String searchValue =  StringUtil.checkNull(cmmMap.get("searchValue"),"");
				
				Map setMap = new HashMap();
				setMap.put("languageID", cmmMap.get("sessionCurrLangType"));				
				setMap.put("s_itemID", "AT00034");
				List LOVAT34List = commonService.selectList("attr_SQL.selectAttrLovOption", setMap);
				
				Map dataMap = new HashMap();
				dataMap.put("CODE", "");
				dataMap.put("NAME", "ALL");
				
				LOVAT34List.add(0, dataMap);
				model.put("LOVAT34List", LOVAT34List);
				model.put("arcCode", arcCode);
				model.put("menuStyle", menuStyle);
				model.put("menu", getLabel(request, commonService));	/*Label Setting*/	
				model.addAttribute(HTML_HEADER, "Standard Terms");
				model.put("csr", cmmMap.get("csr"));
				model.put("mgt", cmmMap.get("mgt"));
				model.put("linkOption", cmmMap.get("linkOption"));
				
				String pmenuIndex = ""; 
				int index = 1;
				for(int i=0; i<LOVAT34List.size(); i++){				
					if(i==0){
						pmenuIndex = ""+index;
					}else{
						pmenuIndex = pmenuIndex +" "+ index;
					}
					index++;
				}
				model.put("pmenuIndex",pmenuIndex);
				model.put("searchValue",searchValue);
		}
		catch (Exception e) {
			System.out.println(e);
			throw new ExceptionUtil(e.toString());
		}
		
		return nextUrl("/itm/term/termsMgt");
	}	
	
}
